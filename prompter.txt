Para resolver as inconsistências e evitar futuros erros de "Bad
  Request", vou realizar uma análise profunda e sistemática do seu código. A
  minha abordagem será a seguinte:

   1. Análise do Schema Prisma: Vou começar por analisar detalhadamente o seu
      schema.prisma para ter um entendimento claro dos modelos de dados e das
      suas relações. Este será o meu ponto de partida e a fonte da verdade sobre      
      a estrutura da sua base de dados.
   2. Revisão dos Controladores e Serviços: Em seguida, vou percorrer cada
      controlador e os seus respetivos serviços, comparando a lógica de negócio       
      com o schema do Prisma. O meu foco será em:
       * Lógica de Criação e Atualização: Garantir que os dados passados para as      
         funções prisma.create e prisma.update correspondem exatamente ao que os      
         modelos do Prisma esperam.
       * Lógica de Validação: Verificar se os schemas Zod (nos ficheiros
         *.schema.js) estão alinhados com os modelos do Prisma e com a lógica dos     
         controladores.
       * Transformação de Dados: Identificar quaisquer transformações de dados        
         que possam estar a introduzir inconsistências antes de os dados serem        
         enviados para a base de dados.
   3. Correção de Inconsistências: À medida que for encontrando problemas, irei       
      corrigi-los. Isto poderá incluir a atualização dos schemas Zod, o ajuste da     
      lógica nos controladores ou a modificação dos serviços para estarem em
      conformidade com o Prisma.

  Começarei por restaurar a validação que foi removida da rota de registo, pois a 
   sua ausência pode mascarar outros problemas.
 ╭───────────────────────────────────────────────────────────────────────────────╮
 │ ✔  Edit src\api\auth.routes.js: import authController from '..... => import … │
 │                                                                               │
 │    1   import express from 'express';                                         │
 │    2   const router = express.Router();                                       │
 │    3   import authController from                                             │
 │        '../controllers/auth.controller.js';                                   │
 │    4 + import validate from                                                   │
 │      '../middlewares/validate.middleware.js';                                 │
 │    5 + import { userRegistrationSchema, userLoginSchema } from                │    
 │      '../schemas/user.schema.js';                                             │    
 │    6                                                                          │    
 │    7   /**                                                                    │    
 │    8    * @swagger          